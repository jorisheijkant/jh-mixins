// Responsive mixins

@mixin respond-from($min) {
	@media (min-width: $min) {
		@content;
	}
}

@mixin respond-until($max) {
	@media (max-width: $max - 1) {
		@content;
	}
}

@mixin respond-between($min, $max) {
	@media (min-width: $min) and (max-width: $max - 1) {
		@content;
	}
}

// Handy shortcuts

@mixin wh($width, $height: none) {
	width: $width;

	@if($height == none) {
		height: $width;
	} @else {
		height: $height;
	}
}

@mixin flex-center() {
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: column;
}

@mixin flex-center-row() {
	display: flex;
	align-items: center;
	justify-content: center;
	flex-direction: row;
}

// For grids

@mixin grid-layout($item-width: 300px, $gap: 30px, $side-spacing: 15px) {
	display: grid;
	grid-gap: $gap;
	grid-template-columns: 1fr;
	max-width: $item-width;

	justify-content: center;
	justify-items: center;
	align-content: center;
	align-items: center;

	@media (max-width: #{2 * $item-width + 2 * $side-spacing + $gap} - 1) {
		grid-template-columns: 1fr;
		max-width: $item-width
	}

	@media (min-width: #{2 * $item-width + 2 * $side-spacing + $gap}) and (max-width: #{3 * $item-width + 2 * $side-spacing + 2 * $gap}) {
		grid-template-columns: 1fr 1fr;
		max-width: #{2 * $item-width + 1 * $gap};
	}

	@media (min-width: #{3 * $item-width + 2 * $side-spacing + 2 * $gap}) and (max-width: #{4 * $item-width + 2 * $side-spacing + 3 * $gap}) {
		grid-template-columns: 1fr 1fr 1fr;
		max-width: #{3 * $item-width + 2 * $gap};
	}

	@media (min-width: #{4 * $item-width + 2 * $side-spacing + 3 * $gap}) {
		grid-template-columns: 1fr 1fr 1fr 1fr;
		max-width: #{4 * $item-width + 3 * $gap};
	}
}